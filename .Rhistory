xlab('Cutoff percentage') +
ylab('True Positives and False Positives') +
ggtitle('Positive Signal for omega_min = 0.9 and omega_max = 10') +
scale_fill_manual(values=c('green', 'red'),
name="Positive Signal",
breaks=c('tp', 'fp'),
labels=c('True positives', 'False positives')) +
theme_bw() +
ylim(0, 40)
p_09_10
data_5 <- comprehensive_performance_summary
names(data_5) <- c('model', 'omega_min', 'omega_mod', 'omega_max', 'num_max', 'num_mod', 'cutoff', 'tp', 'tn', 'fp', 'fn', 'sensitivity', 'specificity', 'fdr')
data_5$omega_class <- ifelse(data_5$omega_min == '075' & data_5$omega_max == '5', '075, 5',
ifelse(data_5$omega_min == '075' & data_5$omega_max == '10', '075, 10',
ifelse(data_5$omega_min == '09' & data_5$omega_max == '5', '09, 5', '09, 10')))
data_5$omega_class <- factor(data_5$omega_class, levels=c('075, 5', '09, 10'))
data_5$num_max <- factor(data_5$num_max, levels=c('6', '17', '23'))
data_5 <- data_5[data_5$cutoff == '0.05' | data_5$cutoff == '0.1' | data_5$cutoff == '0.15' | data_5$cutoff == '0.2', ]
data_5$cutoff <- factor(data_5$cutoff, levels=c('0.2', '0.15', '0.1', '0.05'))
data_5 <- melt(data_5)
data_5 <- data_5[data_5$variable == 'tp' | data_5$variable == 'fp', ]
labels <- c('6' = '29', '17' = '51', '23' = '63')
p_FEL <- ggplot(na.omit(data_5), aes(x=cutoff, y=value)) +
geom_point(aes(color=model,
shape=variable,
group=interaction(model, variable),
alpha=0.5), size=4) +
geom_line(aes(color=model,
group=interaction(model, variable))) +
facet_grid(num_max ~ omega_class, labeller=labeller(num_max = labels)) +
xlab('Cutoff percentage') +
ylab('True Positives and False Positives') +
ggtitle('Positive Signal for Fixed Effects Approaches') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background=element_blank()) +
scale_color_manual(values=c('blue', 'orange'),
name="Positive Signal",
breaks=c('ExpCM', 'YNGKP'),
labels=c('ExpCM', 'YNGKP')) +
scale_shape_manual(values=c(19, 17),
name="Positive Signal",
breaks=c('tp', 'fp'),
labels=c('True Positives', 'False positives')) +
theme(axis.text=element_text(size=16)) +
ylim(0, 36)
p_FEL
data_7 <- comprehensive_performance_summary
names(data_7) <- c('model', 'omega_min', 'omega_mod', 'omega_max', 'num_max', 'num_mod', 'cutoff', 'tp', 'tn', 'fp', 'fn', 'sensitivity', 'specificity', 'fdr')
data_7$omega_class <- ifelse(data_7$omega_min == '075' & data_7$omega_max == '5', '075, 5',
ifelse(data_7$omega_min == '075' & data_7$omega_max == '10', '075, 10',
ifelse(data_7$omega_min == '09' & data_7$omega_max == '5', '09, 5', '09, 10')))
data_7$omega_class <- factor(data_7$omega_class, levels=c('075, 5', '09, 10'))
data_7$num_max <- factor(data_7$num_max, levels=c('6', '17', '23'))
data_7 <- data_7[data_7$cutoff == '0.8' | data_7$cutoff == '0.85' | data_7$cutoff == '0.9' | data_7$cutoff == '0.95' | data_7$cutoff == '0.99', ]
data_7$cutoff <- factor(data_7$cutoff, levels=c('0.8', '0.85', '0.9', '0.95', '0.99'))
data_7 <- melt(data_7)
data_7 <- data_7[data_7$variable == 'tp' | data_7$variable == 'fp', ]
labels <- c('6' = '29', '17' = '51', '23' = '63')
p_REL <- ggplot(na.omit(data_7), aes(x=cutoff, y=value)) +
geom_point(aes(color=model,
shape=variable,
group=interaction(model, variable),
alpha=0.5), size=4) +
geom_line(aes(color=model,
group=interaction(model, variable))) +
facet_grid(num_max ~ omega_class, labeller=labeller(num_max = labels)) +
xlab('Cutoff percentage') +
ylab('True Positives and False Positives') +
ggtitle('Positive Signal for Random Effects Approaches') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background=element_blank()) +
scale_color_manual(values=c('blue', 'orange'),
name="Positive Signal",
breaks=c('ExpCM', 'YNGKP'),
labels=c('ExpCM', 'YNGKP')) +
scale_shape_manual(values=c(19, 17),
name="Positive Signal",
breaks=c('tp', 'fp'),
labels=c('True Positives', 'False positives')) +
theme(axis.text=element_text(size=16)) +
ylim(0, 36)
p_REL
T2Ddata <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2DidevP.csv', header=T)
SNPS <- read.csv(file= 'C:/Users/jonat/Desktop/PHG 401/SNPdata.csv', header=T)
T2Dscores <-read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2Dscores.csv', header=T)
TestPatient <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/TestPatient.csv', header=T)
library(survival)
plot(survfit(Surv(FollowupDays,FollowupT2D) ~ Overweight,
data=T2survival), col=c('green', 'red'),
xlab='time (days)', ylab='survival')
T2Survival <- read.csv(file='C:/Users/jonat/Desktop/PHG 401/CoxPractice.csv')
plot(survfit(Surv(FollowupDays,FollowupT2D) ~ Overweight,
data=T2survival), col=c('green', 'red'),
xlab='time (days)', ylab='survival')
T2survival <- read.csv(file='C:/Users/jonat/Desktop/PHG 401/CoxPractice.csv')
library(survival)
plot(survfit(Surv(FollowupDays,FollowupT2D) ~ Overweight,
data=T2survival), col=c('green', 'red'),
xlab='time (days)', ylab='survival')
legend('topright', legend = c('notobese', 'obese'), col=c('green', 'red'), pch = c(19))
source('C:/Users/jonat/Desktop/PHG 401/jonmah_lab_8.R', echo=TRUE)
coxtest <- coxph(formula = Surv(FollowupDays, FollowupT2D) ~ Overweight,
data = T2survival)
summary(coxtest)
T2Ddata$PRShigh <- ifelse(T2Ddata$PRS > median, 1, 0)
for (i in 1:15) {
sp <- T2Dscores$snp[i]
load <- as.numeric(T2Dscores$coef[i])
gen <- T2Ddata[, colnames(T2Ddata) == sp]
wt <- gen * load
T2Ddata[, colnames(T2Ddata) == sp]
}
T2Ddata$PRShigh <- ifelse(T2Ddata$PRS > median, 1, 0)
T2Data$PRShigh <- ifelse(T2Ddata$PRS > median, 1, 0)
head(T2Ddata)
str(T2Ddata)
head(SNPS)
str(SNPS)
head(T2Dscores)
str(T2Dscores)
head(TestPatient)
str(TestPatient)
head(SNPS)
SNPS
str(T2Ddata)
T2Ddata <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2DidevP.csv', header=T)
SNPS <- read.csv(file= 'C:/Users/jonat/Desktop/PHG 401/SNPdata.csv', header=T)
T2Dscores <-read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2Dscores.csv', header=T)
TestPatient <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/TestPatient.csv', header=T)
T2survival <- read.csv(file='C:/Users/jonat/Desktop/PHG 401/CoxPractice.csv')
library(survival)
head(T2Ddata)
str(T2Ddata)
head(SNPS)
str(SNPS)
head(T2Dscores)
str(T2Dscores)
head(TestPatient)
str(TestPatient)
summary(glm(T2Dany~Age+Sex+rs163184, data = T2Ddata, family = 'binomial'))
summary(glm(T2Dany~Age+Sex+rs163182, data = T2Ddata, family = 'binomial'))
str(T2Ddata)
T2Ddata$rs163184
T2Ddata$[rs163184]
T2Ddata$[rs163184,]
T2Ddata[rs163184]
T2Ddata[rs163184,]
T2Ddata
view(T2Ddata)
View(T2Ddata)
View(SNPS)
summary(glm(T2Dany~Age+Sex+rs4457053, data = T2Ddata, family = 'binomial'))
T2Dscores[order(-T2Dscores$coef),]
View(T2Dscores)
View(T2Ddata)
for (i in 1:15){
sp <-T2Dscores$snp[i]
load <-as.numeric(T2Dscores$coef[i])
gen <-T2Ddata[,colnames(T2Ddata)==sp]
wt <- gen*load
T2Ddata[,colnames(T2Ddata)==sp]<-wt
}
T2Ddata$PRS <- rowSums(T2Ddata[,2:16])
T2Ddata
hist(T2Ddata$PRS)
T2Dreg <-glm(T2Dany~Age+Sex+PRS,data=T2Ddata,family="binomial")
summary(T2Dreg)
exp(coefficients(T2Dreg))
T2Ddata$PRShigh <-ifelse(T2Ddata$PRS > median(T2Ddata$PRS,na.rm=T),1,0)
T2Dsp <-glm(T2Dany~Age+Sex+PRShigh,data=T2Ddata,family="binomial")
summary(T2Dsp)
exp(coefficients(T2Dsp))
for (i in 1:15){
sp <-T2Dscores$snp[i]
load <-as.numeric(T2Dscores$coef[i])
gen <-TestPatient[,colnames(TestPatient)==sp]
wt <- gen*load
TestPatient[,colnames(TestPatient)==sp]<-wt
}
TestPatient$PRS <- rowSums(TestPatient[,2:16])
TestPatient$PRS
mean(T2Ddata$PRS)
T2Ddata$PRS
mean(T2Ddata$PRS)
mean(as.numeric(T2Ddata$PRS))
sum(T2Ddata$PRS)
T2Ddata$PRS
median(T2Ddata$PRS)
mean(T2Ddata$PRS, na.rm=T)
summary(T2Dsp)
summary(T2Dreg)
T2Dpractice <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2DFinal.csv', header=T)
T2Dpractice
Diabetes <- T2Dpractice[T2Dpractice$T2Dany == 1,]
hist(Diabetes$Insulin)
InsulinCont <- lm(Insulin~Age+rs243021, data=T2Dpractices)
InsulinCont <- lm(Insulin~Age+rs243021, data=T2Dpractices)
InsulinCont <- lm(Insulin~Age+rs243021, data=T2Dpractice)
summary(InsulinCont)
T2Ddx <- glm(T2Dany~Age + 243021, data=T2Dpractice, family="binomial")
T2Ddx<- glm(T2Dany~Age+rs243021, data = T2Dpractice, family="binomial")
summary(T2Ddx)
exp(coef(T2Ddx))
Regresults <- read.csv(file = 'C:/Users/jonat/Desktop/PHG 401/T2Dregressions.csv', header=T)
Regresults
Regresults[order(Regresults$pval),]
source('C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab/Scripts/pilot_neutral_sim.R', echo=TRUE)
# Load necessary packages
library(plotrix)
library(diagram)
library(RColorBrewer)
# Load necessary packages
install.packages('plotrix')
# Load necessary packages
install.packages('diagram')
# Load necessary packages
install.packages('installr')
updateR()
library(installr)
updateR()
updateR()
# Load necessary packages
# install.packages('vcfR')
library(vcfR)
# Set the working directory
setwd("C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab")
vcf2sfs = function(vcf) {
vcf = vcf@gt
vcf = vcf[, 2:101]
for (i in 1:nrow(vcf)) {
for (j in 1:100) {
if (vcf[i, j] == '0|0') {
vcf[i, j] = 0
} else if(vcf[i, j] == '1|1') {
vcf[i, j] = 2
} else if(vcf[i, j] == '1|0') {
vcf[i, j] = 1
} else{
vcf[i, j] = 1
}
}
}
class(vcf) = 'numeric'
sfs = colSums(vcf)
sfs = table(sfs)
barplot(sfs)
}
# Define path to file
path_to_datafile <- './Data/pilot_neutral_sim/'
vcf_0 <- read.vcfR(paste(path_to_datafile, 'output_0.vcf', sep=''))
vcf2sfs(vcf_0)
title(main='SFS_0', xlab='Site Frequency', ylab='Number of sites')
vcf_1 <- read.vcfR(paste(path_to_datafile, 'output_1.vcf', sep=''))
vcf2sfs(vcf_1)
title(main='SFS_1', xlab='Site Frequency', ylab='Number of sites')
vcf_2 <- read.vcfR(paste(path_to_datafile, 'output_2.vcf', sep=''))
vcf2sfs(vcf_2)
title(main='SFS_2', xlab='Site Frequency', ylab='Number of sites')
vcf_3 <- read.vcfR(paste(path_to_datafile, 'output_3.vcf', sep=''))
vcf2sfs(vcf_3)
title(main='SFS_3', xlab='Site Frequency', ylab='Number of sites')
# Author: Jonathan Mah
# Date: 20190701
# Load necessary packages
# install.packages('vcfR')
library(vcfR)
# Set the working directory
setwd("C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab")
# Define vcf2sfs function
vcf2sfs = function(vcf) {
vcf = vcf@gt
vcf = vcf[, 2:101]
for (i in 1:nrow(vcf)) {
for (j in 1:100) {
if (vcf[i, j] == '0|0') {
vcf[i, j] = 0
} else if(vcf[i, j] == '1|1') {
vcf[i, j] = 2
} else if(vcf[i, j] == '1|0') {
vcf[i, j] = 1
} else{
vcf[i, j] = 1
}
}
}
class(vcf) = 'numeric'
sfs = colSums(vcf)
sfs = table(sfs)
barplot(sfs)
}
# Define path to file
path_to_datafile <- './Data/pilot_neutral_sim/'
vcf_0 <- read.vcfR(paste(path_to_datafile, 'output_0.vcf', sep=''))
vcf2sfs(vcf_0)
title(main='SFS_0', xlab='Site Frequency', ylab='Number of sites')
vcf_1 <- read.vcfR(paste(path_to_datafile, 'output_1.vcf', sep=''))
vcf2sfs(vcf_1)
title(main='SFS_1', xlab='Site Frequency', ylab='Number of sites')
vcf_2 <- read.vcfR(paste(path_to_datafile, 'output_2.vcf', sep=''))
vcf2sfs(vcf_2)
title(main='SFS_2', xlab='Site Frequency', ylab='Number of sites')
vcf_3 <- read.vcfR(paste(path_to_datafile, 'output_3.vcf', sep=''))
vcf2sfs(vcf_3)
title(main='SFS_3', xlab='Site Frequency', ylab='Number of sites')
vcf_4 <- read.vcfR(paste(path_to_datafile, 'output_4.vcf', sep=''))
vcf2sfs(vcf_4)
title(main='SFS_4', xlab='Site Frequency', ylab='Number of sites')
vcf_5 <- read.vcfR(paste(path_to_datafile, 'output_5.vcf', sep=''))
vcf2sfs(vcf_5)
title(main='SFS_5', xlab='Site Frequency', ylab='Number of sites')
vcf_6 <- read.vcfR(paste(path_to_datafile, 'output_6.vcf', sep=''))
vcf2sfs(vcf_6)
title(main='SFS_6', xlab='Site Frequency', ylab='Number of sites')
vcf_7 <- read.vcfR(paste(path_to_datafile, 'output_7.vcf', sep=''))
vcf2sfs(vcf_7)
title(main='SFS_7', xlab='Site Frequency', ylab='Number of sites')
vcf_8 <- read.vcfR(paste(path_to_datafile, 'output_8.vcf', sep=''))
vcf2sfs(vcf_8)
title(main='SFS_8', xlab='Site Frequency', ylab='Number of sites')
vcf_9 <- read.vcfR(paste(path_to_datafile, 'output_9.vcf', sep=''))
vcf2sfs(vcf_9)
title(main='SFS_9', xlab='Site Frequency', ylab='Number of sites')
# Author: Jonathan Mah
# Date: 20190701
# Load necessary packages
# install.packages('vcfR')
library(vcfR)
# Set the working directory
setwd("C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab")
# Define vcf2sfs function
vcf2sfs = function(vcf) {
vcf = vcf@gt
vcf = vcf[, 2:101]
for (i in 1:nrow(vcf)) {
for (j in 1:100) {
if (vcf[i, j] == '0|0') {
vcf[i, j] = 0
} else if(vcf[i, j] == '1|1') {
vcf[i, j] = 2
} else if(vcf[i, j] == '1|0') {
vcf[i, j] = 1
} else{
vcf[i, j] = 1
}
}
}
class(vcf) = 'numeric'
sfs = colSums(vcf)
sfs = table(sfs)
barplot(sfs)
}
# Define path to file
path_to_datafile <- './Data/pilot_neutral_sim/'
vcf_0 <- read.vcfR(paste(path_to_datafile, 'output_0.vcf', sep=''))
vcf2sfs(vcf_0)
title(main='SFS_0', xlab='Site Frequency', ylab='Number of sites')
vcf_1 <- read.vcfR(paste(path_to_datafile, 'output_1.vcf', sep=''))
vcf2sfs(vcf_1)
title(main='SFS_1', xlab='Site Frequency', ylab='Number of sites')
vcf_2 <- read.vcfR(paste(path_to_datafile, 'output_2.vcf', sep=''))
vcf2sfs(vcf_2)
title(main='SFS_2', xlab='Site Frequency', ylab='Number of sites')
vcf_3 <- read.vcfR(paste(path_to_datafile, 'output_3.vcf', sep=''))
vcf2sfs(vcf_3)
title(main='SFS_3', xlab='Site Frequency', ylab='Number of sites')
vcf_4 <- read.vcfR(paste(path_to_datafile, 'output_4.vcf', sep=''))
vcf2sfs(vcf_4)
title(main='SFS_4', xlab='Site Frequency', ylab='Number of sites')
vcf_5 <- read.vcfR(paste(path_to_datafile, 'output_5.vcf', sep=''))
vcf2sfs(vcf_5)
title(main='SFS_5', xlab='Site Frequency', ylab='Number of sites')
vcf_6 <- read.vcfR(paste(path_to_datafile, 'output_6.vcf', sep=''))
vcf2sfs(vcf_6)
title(main='SFS_6', xlab='Site Frequency', ylab='Number of sites')
vcf_7 <- read.vcfR(paste(path_to_datafile, 'output_7.vcf', sep=''))
vcf2sfs(vcf_7)
title(main='SFS_7', xlab='Site Frequency', ylab='Number of sites')
vcf_8 <- read.vcfR(paste(path_to_datafile, 'output_8.vcf', sep=''))
vcf2sfs(vcf_8)
title(main='SFS_8', xlab='Site Frequency', ylab='Number of sites')
vcf_9 <- read.vcfR(paste(path_to_datafile, 'output_9.vcf', sep=''))
vcf2sfs(vcf_9)
title(main='SFS_9', xlab='Site Frequency', ylab='Number of sites')
# Author: Jonathan Mah
# Date: 20190701
# Load necessary packages
# install.packages('vcfR')
library(vcfR)
# Set the working directory
setwd("C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab")
# Define vcf2sfs function
vcf2sfs = function(vcf) {
vcf = vcf@gt
vcf = vcf[, 2:101]
for (i in 1:nrow(vcf)) {
for (j in 1:100) {
if (vcf[i, j] == '0|0') {
vcf[i, j] = 0
} else if(vcf[i, j] == '1|1') {
vcf[i, j] = 2
} else if(vcf[i, j] == '1|0') {
vcf[i, j] = 1
} else{
vcf[i, j] = 1
}
}
}
class(vcf) = 'numeric'
sfs = colSums(vcf)
sfs = table(sfs)
barplot(sfs)
}
# Define path to file
path_to_datafile <- './Data/pilot_neutral_sim/'
vcf_0 <- read.vcfR(paste(path_to_datafile, 'output_0.vcf', sep=''))
vcf2sfs(vcf_0)
title(main='SFS_0', xlab='Site Frequency', ylab='Number of sites')
vcf_1 <- read.vcfR(paste(path_to_datafile, 'output_1.vcf', sep=''))
vcf2sfs(vcf_1)
title(main='SFS_1', xlab='Site Frequency', ylab='Number of sites')
vcf_2 <- read.vcfR(paste(path_to_datafile, 'output_2.vcf', sep=''))
vcf2sfs(vcf_2)
title(main='SFS_2', xlab='Site Frequency', ylab='Number of sites')
vcf_3 <- read.vcfR(paste(path_to_datafile, 'output_3.vcf', sep=''))
vcf2sfs(vcf_3)
title(main='SFS_3', xlab='Site Frequency', ylab='Number of sites')
vcf_4 <- read.vcfR(paste(path_to_datafile, 'output_4.vcf', sep=''))
vcf2sfs(vcf_4)
title(main='SFS_4', xlab='Site Frequency', ylab='Number of sites')
vcf_5 <- read.vcfR(paste(path_to_datafile, 'output_5.vcf', sep=''))
vcf2sfs(vcf_5)
title(main='SFS_5', xlab='Site Frequency', ylab='Number of sites')
vcf_6 <- read.vcfR(paste(path_to_datafile, 'output_6.vcf', sep=''))
vcf2sfs(vcf_6)
title(main='SFS_6', xlab='Site Frequency', ylab='Number of sites')
vcf_7 <- read.vcfR(paste(path_to_datafile, 'output_7.vcf', sep=''))
vcf2sfs(vcf_7)
title(main='SFS_7', xlab='Site Frequency', ylab='Number of sites')
vcf_8 <- read.vcfR(paste(path_to_datafile, 'output_8.vcf', sep=''))
vcf2sfs(vcf_8)
title(main='SFS_8', xlab='Site Frequency', ylab='Number of sites')
vcf_9 <- read.vcfR(paste(path_to_datafile, 'output_9.vcf', sep=''))
vcf2sfs(vcf_9)
title(main='SFS_9', xlab='Site Frequency', ylab='Number of sites')
View(vcf_2)
View(vcf_7)
view(vcf_7@gt)
View(vcf_7@gt)
# Author: Jonathan Mah
# Date: 20190701
# Load necessary packages
# install.packages('vcfR')
library(vcfR)
# Set the working directory
setwd("C:/Users/jonat/Desktop/UCLA_BIG_SURP/lohmueller_lab")
# Define vcf2sfs function
vcf2sfs = function(vcf) {
vcf = vcf@gt
vcf = vcf[, 2:101]
for (i in 1:nrow(vcf)) {
for (j in 1:100) {
if (vcf[i, j] == '0|0') {
vcf[i, j] = 0
} else if(vcf[i, j] == '1|1') {
vcf[i, j] = 2
} else if(vcf[i, j] == '1|0') {
vcf[i, j] = 1
} else{
vcf[i, j] = 1
}
}
}
class(vcf) = 'numeric'
sfs = rowSums(vcf)
sfs = table(sfs)
barplot(sfs)
}
# Define path to file
path_to_datafile <- './Data/pilot_neutral_sim/'
vcf_0 <- read.vcfR(paste(path_to_datafile, 'output_0.vcf', sep=''))
vcf2sfs(vcf_0)
title(main='SFS_0', xlab='Site Frequency', ylab='Number of sites')
vcf_1 <- read.vcfR(paste(path_to_datafile, 'output_1.vcf', sep=''))
vcf2sfs(vcf_1)
title(main='SFS_1', xlab='Site Frequency', ylab='Number of sites')
vcf_2 <- read.vcfR(paste(path_to_datafile, 'output_2.vcf', sep=''))
vcf2sfs(vcf_2)
title(main='SFS_2', xlab='Site Frequency', ylab='Number of sites')
vcf_3 <- read.vcfR(paste(path_to_datafile, 'output_3.vcf', sep=''))
vcf2sfs(vcf_3)
title(main='SFS_3', xlab='Site Frequency', ylab='Number of sites')
vcf_4 <- read.vcfR(paste(path_to_datafile, 'output_4.vcf', sep=''))
vcf2sfs(vcf_4)
title(main='SFS_4', xlab='Site Frequency', ylab='Number of sites')
vcf_5 <- read.vcfR(paste(path_to_datafile, 'output_5.vcf', sep=''))
vcf2sfs(vcf_5)
title(main='SFS_5', xlab='Site Frequency', ylab='Number of sites')
vcf_6 <- read.vcfR(paste(path_to_datafile, 'output_6.vcf', sep=''))
vcf2sfs(vcf_6)
title(main='SFS_6', xlab='Site Frequency', ylab='Number of sites')
vcf_7 <- read.vcfR(paste(path_to_datafile, 'output_7.vcf', sep=''))
vcf2sfs(vcf_7)
title(main='SFS_7', xlab='Site Frequency', ylab='Number of sites')
vcf_8 <- read.vcfR(paste(path_to_datafile, 'output_8.vcf', sep=''))
vcf2sfs(vcf_8)
title(main='SFS_8', xlab='Site Frequency', ylab='Number of sites')
vcf_9 <- read.vcfR(paste(path_to_datafile, 'output_9.vcf', sep=''))
vcf2sfs(vcf_9)
title(main='SFS_9', xlab='Site Frequency', ylab='Number of sites')
vcf_0@meta
vcf_0@m=fix
vcf_0@fix
